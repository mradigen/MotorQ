name: motorq

services:
  postgres:
    image: postgres:15
    container_name: motorq_postgres
    environment:
      POSTGRES_DB: motorq_fleet
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # app-migration:
  #   build: .
  #   container_name: motorq_migration
  #   environment:
  #     - NODE_ENV=production
  #     - DB_HOST=postgres
  #     - DB_PORT=5432
  #     - DB_USER=postgres
  #     - DB_PASSWORD=password
  #     - DB_NAME=motorq_fleet
  #     - HIGH_SPEED_THRESHOLDS=[50, 80, 100, 120]
  #     - LOW_FUEL_THRESHOLDS=[15, 10, 5]
  #     - ANALYTICS_INTERVAL_SECONDS=300
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #   command: sh -c "pnpm run migrate"
  #   restart: "no"

  appservice:
    build: .
    container_name: motorq_app
    environment:
      - NODE_ENV=production
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=password
      - DB_NAME=motorq_fleet
      - HIGH_SPEED_THRESHOLDS=[50, 80, 100, 120]
      - LOW_FUEL_THRESHOLDS=[15, 10, 5]
      - ANALYTICS_INTERVAL_SECONDS=300
      - PORT=3000
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
    # healthcheck:
    #   test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/api/monitoring/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3
    #   start_period: 40s
    restart: unless-stopped

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: motorq_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@motorq.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "8080:80"
    depends_on:
      - postgres
    volumes:
      - pgadmin_data:/var/lib/pgadmin

  prometheus:
    image: prom/prometheus:latest
    container_name: motorq_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    # network_mode: host

  grafana:
    image: grafana/grafana:latest
    container_name: motorq_grafana
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: false
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./data/grafana-provisioning:/etc/grafana/provisioning
      - ./data/grafana-dashboard.json:/var/lib/grafana/dashboards/motorq-dashboard.json
    # depends_on:
    #   - prometheus
    restart: unless-stopped
    # network_mode: host

volumes:
  postgres_data:
  pgadmin_data:
  prometheus_data:
  grafana_data:
